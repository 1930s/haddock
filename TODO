* when exporting a class method on its own, don't list the whole class in
  the export list (we should try to construct the type of the method, somehow).

* Allow linking to a section name?

* Class names aren't rendered as proper binders

* for a constructor, don't fill its entire cell with a grey background.

* don't link to M.x if M.x is re-exported via a 'module N' from module M.

* switch to longer rendering form for datatypes when necessary?

* Pick the preferred export names as per the paper.

* Top-level package docs

* instances: need to construct instances for deriving clauses, somehow.

* attributes for individual declarations, eg.
    -- #abstract
  or targetted to a specific decl:
    -- #T: abstract

  #long, #short, #noinstances (on a type or class)

* A module re-export should only reference the target module if the
  target module is imported without hiding any of its exports (otherwise
  we should inline just the exported bits).

* facilities for saving interfaces so that you can run Haddock against
  something that isn't the Prelude.

* Do the unlitting/CPPing from Haddock itself so we get the source file
  links right.

* Allow documentation annotations to explicitly name the entity they
  refer to.

* Add back-references from the definition to the uses of types/classes
  (perhaps in the index?)
* In the contents page, indicate portability/stability of each module
  somehow.

* remove extra whitespace from the generated HTML to save space

* split large modules into several pages (perhaps split at each
  section 1 heading?)

* pay attention to import specs!

* include file revision info in module headers

* Add a link to the defining location of a re-exported entity

* fixities

* we don't deal with records properly - exporting record selectors etc.

* remove the s/r conflicts I added to the grammar

* check handling of special types ([], (), (,) etc.)

* Horizontal lines?

* clean up the layout: don't use table cellspacing, use CSS instead

* Support for the rest of GHC extensions in the parser:
  - implicit parameters
  - scoped type variables (return types left to do).

